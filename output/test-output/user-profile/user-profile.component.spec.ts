import { ComponentFixture, TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { DebugElement } from '@angular/core';

import { UserProfileComponent } from './user-profile.component';

/**
 * UserProfileComponent 测试
 * Generated by MCP Generator at 2025/6/29 18:41:57
 */
describe('UserProfileComponent', () => {
  let component: UserProfileComponent;
  let fixture: ComponentFixture<UserProfileComponent>;
  let debugElement: DebugElement;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UserProfileComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(UserProfileComponent);
    component = fixture.componentInstance;
    debugElement = fixture.debugElement;
    fixture.detectChanges();
  });

  it('应该创建组件', () => {
    expect(component).toBeTruthy();
  });

  it('应该正确显示组件名称', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const titleElement = compiled.querySelector('.user-profile__title');
    expect(titleElement?.textContent).toContain('UserProfile');
  });

  it('应该正确显示组件描述', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const descElement = compiled.querySelector('.user-profile__description');
    expect(descElement?.textContent).toContain('用户资料组件');
  });

  describe('输入属性测试', () => {
    it('应该正确接收 user 输入', () => {
      const testValue: User = 'test value';
      component.user = testValue;
      fixture.detectChanges();
      expect(component.user).toBe(testValue);
    });
  });
  describe('输入属性测试', () => {
    it('应该正确接收 editable 输入', () => {
      const testValue: boolean = false;
      component.editable = testValue;
      fixture.detectChanges();
      expect(component.editable).toBe(testValue);
    });
  });

  describe('输出事件测试', () => {
    it('应该触发 userUpdated 事件', () => {
      spyOn(component.userUpdated, 'emit');
      const testData: User = 'test data';
      
      component.on(testData);
      
      expect(component.userUpdated.emit).toHaveBeenCalledWith(testData);
    });
  });
  describe('输出事件测试', () => {
    it('应该触发 editToggled 事件', () => {
      spyOn(component.editToggled, 'emit');
      const testData: boolean = 'test data';
      
      component.on(testData);
      
      expect(component.editToggled.emit).toHaveBeenCalledWith(testData);
    });
  });

  it('应该在 ngOnInit 中初始化', () => {
    spyOn(console, 'log');
    component.ngOnInit();
    expect(console.log).toHaveBeenCalledWith('UserProfileComponent initialized');
  });

  it('应该在 ngOnDestroy 中清理', () => {
    spyOn(console, 'log');
    component.ngOnDestroy();
    expect(console.log).toHaveBeenCalledWith('UserProfileComponent destroyed');
  });


  describe('用户交互测试', () => {
    it('应该在点击按钮时触发 userUpdated 事件', () => {
      spyOn(component, 'onUserUpdated');
      
      const button = fixture.debugElement.query(By.css('button'));
      if (button) {
        button.nativeElement.click();
        expect(component.onUserUpdated).toHaveBeenCalled();
      }
    });
  });
  describe('用户交互测试', () => {
    it('应该在点击按钮时触发 editToggled 事件', () => {
      spyOn(component, 'onEditToggled');
      
      const button = fixture.debugElement.query(By.css('button'));
      if (button) {
        button.nativeElement.click();
        expect(component.onEditToggled).toHaveBeenCalled();
      }
    });
  });

  it('应该应用正确的CSS类', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const mainDiv = compiled.querySelector('.user-profile');
    expect(mainDiv).toBeTruthy();
  });

  it('应该显示生成时间', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const footer = compiled.querySelector('.user-profile__footer small');
    expect(footer?.textContent).toContain('Generated by MCP Generator');
  });
}); 