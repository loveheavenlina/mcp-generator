import { ComponentFixture, TestBed } from '@angular/core/testing';
{{#standalone}}
import { By } from '@angular/platform-browser';
import { DebugElement } from '@angular/core';
{{/standalone}}

import { {{componentName}}Component } from './{{#helpers.kebabCase}}{{componentName}}{{/helpers.kebabCase}}.component';

/**
 * {{componentName}}Component 测试
 * Generated by MCP Generator at {{#helpers.currentTime}}{{/helpers.currentTime}}
 */
describe('{{componentName}}Component', () => {
  let component: {{componentName}}Component;
  let fixture: ComponentFixture<{{componentName}}Component>;
  {{#standalone}}
  let debugElement: DebugElement;
  {{/standalone}}

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      {{#standalone}}
      imports: [{{componentName}}Component]
      {{/standalone}}
      {{^standalone}}
      declarations: [{{componentName}}Component]
      {{/standalone}}
    }).compileComponents();

    fixture = TestBed.createComponent({{componentName}}Component);
    component = fixture.componentInstance;
    {{#standalone}}
    debugElement = fixture.debugElement;
    {{/standalone}}
    fixture.detectChanges();
  });

  it('应该创建组件', () => {
    expect(component).toBeTruthy();
  });

  it('应该正确显示组件名称', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const titleElement = compiled.querySelector('.{{#helpers.kebabCase}}{{componentName}}{{/helpers.kebabCase}}__title');
    expect(titleElement?.textContent).toContain('{{componentName}}');
  });

  it('应该正确显示组件描述', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const descElement = compiled.querySelector('.{{#helpers.kebabCase}}{{componentName}}{{/helpers.kebabCase}}__description');
    expect(descElement?.textContent).toContain('{{description}}');
  });

  {{#inputs}}
  describe('输入属性测试', () => {
    {{#.}}
    it('应该正确接收 {{name}} 输入', () => {
      const testValue{{#type}}: {{type}}{{/type}} = {{#defaultValue}}{{defaultValue}}{{/defaultValue}}{{^defaultValue}}'test value'{{/defaultValue}};
      component.{{name}} = testValue;
      fixture.detectChanges();
      expect(component.{{name}}).toBe(testValue);
    });
    {{/.}}
  });
  {{/inputs}}

  {{#outputs}}
  describe('输出事件测试', () => {
    {{#.}}
    it('应该触发 {{name}} 事件', () => {
      spyOn(component.{{name}}, 'emit');
      const testData{{#type}}: {{type}}{{/type}} = {{#defaultValue}}{{defaultValue}}{{/defaultValue}}{{^defaultValue}}'test data'{{/defaultValue}};
      
      component.on{{helpers.pascalCase name}}(testData);
      
      expect(component.{{name}}.emit).toHaveBeenCalledWith(testData);
    });
    {{/.}}
  });
  {{/outputs}}

  {{#lifecycle.ngOnInit}}
  it('应该在 ngOnInit 中初始化', () => {
    spyOn(console, 'log');
    component.ngOnInit();
    expect(console.log).toHaveBeenCalledWith('{{componentName}}Component initialized');
  });
  {{/lifecycle.ngOnInit}}

  {{#lifecycle.ngOnDestroy}}
  it('应该在 ngOnDestroy 中清理', () => {
    spyOn(console, 'log');
    component.ngOnDestroy();
    expect(console.log).toHaveBeenCalledWith('{{componentName}}Component destroyed');
  });
  {{/lifecycle.ngOnDestroy}}

  {{#lifecycle.ngOnChanges}}
  it('应该响应输入变化', () => {
    spyOn(console, 'log');
    const changes = {
      {{#inputs}}
      {{#.}}
      {{name}}: {
        currentValue: 'new value',
        previousValue: 'old value',
        firstChange: false,
        isFirstChange: () => false
      },
      {{/.}}
      {{/inputs}}
    };
    component.ngOnChanges(changes);
    expect(console.log).toHaveBeenCalledWith('{{componentName}}Component changes:', changes);
  });
  {{/lifecycle.ngOnChanges}}

  {{#outputs}}
  describe('用户交互测试', () => {
    {{#.}}
    it('应该在点击按钮时触发 {{name}} 事件', () => {
      spyOn(component, 'on{{#helpers.pascalCase}}{{name}}{{/helpers.pascalCase}}');
      
      const button = fixture.debugElement.query(By.css('button'));
      if (button) {
        button.nativeElement.click();
        expect(component.on{{#helpers.pascalCase}}{{name}}{{/helpers.pascalCase}}).toHaveBeenCalled();
      }
    });
    {{/.}}
  });
  {{/outputs}}

  it('应该应用正确的CSS类', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const mainDiv = compiled.querySelector('.{{#helpers.kebabCase}}{{componentName}}{{/helpers.kebabCase}}');
    expect(mainDiv).toBeTruthy();
  });

  it('应该显示生成时间', () => {
    const compiled = fixture.nativeElement as HTMLElement;
    const footer = compiled.querySelector('.{{#helpers.kebabCase}}{{componentName}}{{/helpers.kebabCase}}__footer small');
    expect(footer?.textContent).toContain('Generated by MCP Generator');
  });
}); 